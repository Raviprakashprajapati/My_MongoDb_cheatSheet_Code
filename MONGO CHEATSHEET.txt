mongosh

use database
show database
db.dropdatebase()

db.createCollection("name")
db.renameCollection("NewName")
show collections
db.collName.drop()


Nested key{"key.key":value}

***OPERATOR***
$eq,$ne,,$gt,$gte,$lt,$lte
$in  : [v,v,v]   if anyone found it reutrn
$nin : [v,v,v] not from anyone

EX: db.colName.find({key:{$gt:40}})


***LOGICAL OPERATOR***
$or  : [ {cond1}, {cond2} ] if anyone found it reutrn
$and : [ {cond1}, {cond2} ] it should match all conditions
$not :
$nor :
$all : [v,v,v]  it matches array of values and it should hold all values and no sequene matters


db.coll.find({searchKey:V}, {ProjectionKey:true})
db.coll.find().sort({K:1})
db.coll.find().count()
db.coll.find().count().limit(1)
db.coll.find().skip(1)
db.coll.distinct("keyname")

db.coll.insertOne({-,-,-})
db.coll.insertMany([ {}, {}, {} ])

db.coll.find({k:v}) //find all 
db.coll.find({k:v,-,-})  
db.coll.find({k:v}, {k:true,-,-})
db.coll.findOne({-,-}) //it find only one


***UPDATE***

(<filter>,<update>,<options>)

upsert: it is a <options> which tells if no document match then we will create new dopcuement of it
        ({},{},{upsert:true})

UPDATE OPERATOR:
$set     :  {$set:{k:v}}   it replave values
$unset   :  {$unset:{K:""}} it remove the fields
$rename  :  {$rename:{k:"newK"}} it rename the fields(KEY)
$inc     :  {$inc:{K:number}}
$mul     :  {$mul:{K:number}}
$addToSet:  {$addToSet:{k:v}} it add new value in the array 

db.coll.updateOne({k:v}, {$set:{k:v,-,-,-}})
db.coll.updateMany({k:v}, {$set:{k:v,-,-,-}})


***arrayFilters***

It is <options> and used to updates an value form the array


waqtu hobbies of ravi from cooking to movies
updateOne(
          {name:"ravi"},
          {$set:{"hobbies.$[i]":"movies"}},
          {arrayFilters:[{i:"cooking"}]}
          )


***DELETE***

db.coll.deleteOne(<filters>)
db.coll.deleteMany(<filters>)

***findOneAndDelete***

(<filters>,<sort>)
it used to find single document and delete it and display deleted dopcuement and it also used to delete  the first docuemtn using sorting

db.colNames.findOneAndDelete({},{sort:{k:1 or 0}})



***REGEX***

{field: { $regex : /pattern/ } }
it is used to perfrom pattern matching withing string fields
we can use 'i' for caseInsensitive

start With Letter(L) : { $regex: /^L/i } 
Having Letter(L) : { $regex: /L/ }
ends With Letter(L) : { $regex: /L$/}
having Letter(L) as specifix index 3 from first : { $regex: /^.{2}L/ }
having Letter(L) as specifix index 3 from last :  { $regex: /L.{2}$/ }


Indexing--

db.colName.createIndex({ K:1, k:1 })
db.coll.getIndexes()
db.coll.dropIndex("K")
db.coll.createIndex({key:1},{unique:true}) 

Text Indexs (it are used to enable text search operation and we can used onlt one text search per collection)
db.colName.createIndex({ K : "text" })
db.colName.find({ $text : { $search: V} })

[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { 'imdb.rating': 1 }, name: 'imdb.rating_1' }
]


Explain()--

db.coll.find({}).explain("executionStats")

important fields :
winningPlan: {
      stage: 'COLLSCAN',
      filter: { 'imdb.rating': { '$eq': 9.1 } },
      direction: 'forward'
    },
nReturned: 4,
executionTimeMillis: 35,
totalKeysExamined: 0,
totalDocsExamined: 23543,


Aggregation Pipeline--
It is a set of stages which perfrom diff operation on every stage to filter  the resulting data.
it is bases on the concept of Pipeline in which input or data goes thorugh the Pipeline in which each stage is perfrom diff operation to filter the resulting data

db.colName.aggregate([ {}, {} ])

$match   : it used to filter docs  
           {$match:{cond1}} 

$group   : it group the docs by spiedifc field
            {$group : { _id: <$fieldName>, <aggreOperation> }} 

$project :  it used to which fields we want to show in the output 
             {$project:{field : 1 or 0}} 

            We can also change fieldName in the output LIKE
            {$project: { newName: '$oldName', }}


Q:waqt Di no of person present in each gender ?

  ([

      {$group: { _id:"$gender", total:{$sum:1}  } },
      {$project: { total:1, gender:'$_id', _id:0 } }

   ])



$push : it return values to the fields

Q: waqtDi name of person in each gender group and also show no of person in each gender

    ([
      
      {$group:{ _id:"$gender", count:{$sum:1}, sbakeName:{$push:"$name"} }}

    ])



operation in Aggregation:

$max  : {$group: {_id:null,  MaxAge:{$max:"$age"} }}
$min  :
$avg  :
$sum  :
$count:
$push :
$skip : ([ {$skip:5} ])
$limit:
$sort : ([ {$sort:{colName:1}} ])



$unwind : it used to construt an array field form the iput docs and create a separate dpc for each element 

([

{$unwind: "$hobbies"}
{$group:{
  _id:"$hobbies",
  count:{$sum:1}
}}

])


Arithmetic ---

$subtract
$add
$divide
$floor
$round
$multiply





populate("key") this method replaces the specified path in the document of one collection with the actual document from the other collection







